// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrabajoPractico4;

namespace TrabajoPractico4.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20211130005235_tercera")]
    partial class tercera
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TrabajoPractico4.Cart", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("TrabajoPractico4.CartProduct", b =>
                {
                    b.Property<int>("cartId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("ammount")
                        .HasColumnType("int");

                    b.HasKey("cartId", "productId");

                    b.HasIndex("productId");

                    b.ToTable("CartProduct");
                });

            modelBuilder.Entity("TrabajoPractico4.CartPurchase", b =>
                {
                    b.Property<int>("purchaseId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.HasKey("purchaseId", "productId");

                    b.HasIndex("productId");

                    b.ToTable("CartPurchase");
                });

            modelBuilder.Entity("TrabajoPractico4.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TrabajoPractico4.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ammount")
                        .HasColumnType("int");

                    b.Property<int?>("categoryid")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("categoryid");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TrabajoPractico4.Purchase", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("buyeruserId")
                        .HasColumnType("int");

                    b.Property<double>("total")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("buyeruserId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("TrabajoPractico4.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CUITCUIL")
                        .HasColumnType("bigint");

                    b.Property<int>("dni")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("lastName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("password")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("userType")
                        .HasColumnType("varchar(50)");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TrabajoPractico4.Cart", b =>
                {
                    b.HasOne("TrabajoPractico4.User", "user")
                        .WithOne("cart")
                        .HasForeignKey("TrabajoPractico4.Cart", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("TrabajoPractico4.CartProduct", b =>
                {
                    b.HasOne("TrabajoPractico4.Cart", "cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("cartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrabajoPractico4.Product", "product")
                        .WithMany("CartProducts")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cart");

                    b.Navigation("product");
                });

            modelBuilder.Entity("TrabajoPractico4.CartPurchase", b =>
                {
                    b.HasOne("TrabajoPractico4.Product", "product")
                        .WithMany("CartPurchases")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrabajoPractico4.Purchase", "purchase")
                        .WithMany("cartPurchases")
                        .HasForeignKey("purchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("purchase");
                });

            modelBuilder.Entity("TrabajoPractico4.Product", b =>
                {
                    b.HasOne("TrabajoPractico4.Category", "category")
                        .WithMany()
                        .HasForeignKey("categoryid");

                    b.Navigation("category");
                });

            modelBuilder.Entity("TrabajoPractico4.Purchase", b =>
                {
                    b.HasOne("TrabajoPractico4.User", "buyer")
                        .WithMany()
                        .HasForeignKey("buyeruserId");

                    b.Navigation("buyer");
                });

            modelBuilder.Entity("TrabajoPractico4.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("TrabajoPractico4.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("CartPurchases");
                });

            modelBuilder.Entity("TrabajoPractico4.Purchase", b =>
                {
                    b.Navigation("cartPurchases");
                });

            modelBuilder.Entity("TrabajoPractico4.User", b =>
                {
                    b.Navigation("cart");
                });
#pragma warning restore 612, 618
        }
    }
}
